// <auto-generated />
using System;
using App.Infrastructures.Db.SqlServer.Ef.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructures.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230624220557_seedData-bid")]
    partial class seedDatabid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShebaNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalRevenue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39f9af85-70cd-4b9e-8480-7f65aecdb90f",
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 27, DateTimeKind.Local).AddTicks(5376),
                            Email = "saeidbagheri034@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAEIDBAGHERI034@GMAIL.COM",
                            NormalizedUserName = "SAEIDBAGHERI034",
                            PasswordHash = "AQAAAAIAAYagAAAAEKMZtCvOns16CwLJTaMCALzEGx/We5ITCYbmrviFiTzg/c70cOfAQgCgDiHVePUXkQ==",
                            PhoneNumber = "09389059421",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54e8dfb5-8700-4936-a2cd-4b0369afa909",
                            TwoFactorEnabled = false,
                            UserName = "SaeidBagheri034"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "672edc3d-da55-4c63-ac0f-ed5023d973e9",
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 128, DateTimeKind.Local).AddTicks(6438),
                            Email = "keyvanhafezi@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KEYVANHAFEZI@GMAIL.COM",
                            NormalizedUserName = "KEYVANHAFEZI",
                            PasswordHash = "AQAAAAIAAYagAAAAEH5s8HsO+cZ3Sq54ErvYbdco2TkaQgOk+zk8p9ptJPc4ksG56Pp+elhyZGplWvLZmg==",
                            PhoneNumber = "09199999999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "KKNDWQL54F5NAZZM6LOLFGBUYZWSPKVU",
                            TwoFactorEnabled = false,
                            UserName = "KeyvanHafezi"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountOfProducts")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBuyer")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountOfProducts = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(3108),
                            EndTime = new DateTime(2023, 6, 25, 2, 35, 57, 217, DateTimeKind.Local).AddTicks(3048),
                            HasBuyer = false,
                            Price = 200000,
                            ProductId = 9,
                            StartTime = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(3046),
                            StoreId = 4
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BuyerId");

                    b.ToTable("Bids");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuctionId = 1,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(3265),
                            IsWinner = false,
                            Price = 210000
                        },
                        new
                        {
                            Id = 2,
                            AuctionId = 1,
                            BuyerId = 2,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 37, 57, 217, DateTimeKind.Local).AddTicks(3268),
                            IsWinner = true,
                            Price = 220000
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ProfileImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Buyers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "تهران",
                            CityId = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2433),
                            FirstName = "سعید",
                            IsDeleted = false,
                            LastName = "باقری",
                            Mobile = "09389059421"
                        },
                        new
                        {
                            Id = 2,
                            Address = "تهران پونک",
                            CityId = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2437),
                            FirstName = "کیوان",
                            IsDeleted = false,
                            LastName = "حافظی",
                            Mobile = "09366666666"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(1444),
                            IsDeleted = false,
                            Title = "پوشاک"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(1508),
                            IsDeleted = false,
                            Title = "ابزار"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(1511),
                            IsDeleted = false,
                            ParentId = 2,
                            Title = "ابزار برقی"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(1513),
                            IsDeleted = false,
                            ParentId = 2,
                            Title = "ابزار غیر برقی"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(1515),
                            IsDeleted = false,
                            ParentId = 1,
                            Title = "لباس مردانه"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(1518),
                            IsDeleted = false,
                            Title = "لوازم الکترونیک"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(1520),
                            IsDeleted = false,
                            ParentId = 6,
                            Title = "موبایل"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "ارومیه"
                        },
                        new
                        {
                            Id = 2,
                            Title = "تهران"
                        },
                        new
                        {
                            Id = 3,
                            Title = "رشت"
                        },
                        new
                        {
                            Id = 4,
                            Title = "قزوین"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2728),
                            Description = "راضی بودم خوب بود.",
                            IsConfirmed = false,
                            IsDeleted = false,
                            ProductId = 1,
                            Score = 4
                        },
                        new
                        {
                            Id = 2,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2731),
                            Description = "جنسش بی کیفیت بود.",
                            IsConfirmed = false,
                            IsDeleted = false,
                            ProductId = 2,
                            Score = 2
                        },
                        new
                        {
                            Id = 3,
                            BuyerId = 2,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2733),
                            Description = "قیمتش خیلی بالاست",
                            IsConfirmed = false,
                            IsDeleted = false,
                            ProductId = 5,
                            Score = 4
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("SiteCommission")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2958),
                            IsFinal = true,
                            SellerId = 1,
                            SiteCommission = 55000,
                            TotalAmount = 1100000
                        },
                        new
                        {
                            Id = 2,
                            BuyerId = 2,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2961),
                            IsFinal = true,
                            SellerId = 2,
                            SiteCommission = 475000,
                            TotalAmount = 9500000
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.InvoiceProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountOfProducts")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceProduct", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountOfProducts = 1,
                            InvoiceId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CountOfProducts = 2,
                            InvoiceId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CountOfProducts = 1,
                            InvoiceId = 2,
                            ProductId = 5
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Medal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Medals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "طلا"
                        },
                        new
                        {
                            Id = 2,
                            Title = "نقره"
                        },
                        new
                        {
                            Id = 3,
                            Title = "برنز"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAuction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(1971),
                            IsAuction = false,
                            IsConfirmed = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            Price = 500000,
                            Stock = 10,
                            StoreId = 1,
                            Title = "شلوار لی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2026),
                            IsAuction = false,
                            IsConfirmed = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            Price = 300000,
                            Stock = 15,
                            StoreId = 1,
                            Title = "پیراهن مردانه مدل یقه دار"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2031),
                            IsAuction = false,
                            IsConfirmed = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            Price = 900000,
                            Stock = 4,
                            StoreId = 1,
                            Title = "دریل مدل 2911"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2035),
                            IsAuction = false,
                            IsConfirmed = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            Price = 150000,
                            Stock = 7,
                            StoreId = 1,
                            Title = "انبردست رونیکس مدل ROX-1168"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2039),
                            IsAuction = false,
                            IsConfirmed = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            Price = 9500000,
                            Stock = 3,
                            StoreId = 2,
                            Title = "موبایل شیائومی redmi note 11"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FeePercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MedalId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ProfileImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShebaNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("MedalId");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "تهران",
                            CityId = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2282),
                            FeePercentage = 5m,
                            FirstName = "سعید",
                            IsDeleted = false,
                            LastName = "باقری",
                            Mobile = "09389059421"
                        },
                        new
                        {
                            Id = 2,
                            Address = "تهران پونک",
                            CityId = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2339),
                            FeePercentage = 5m,
                            FirstName = "کیوان",
                            IsDeleted = false,
                            LastName = "حافظی",
                            Mobile = "09366666666"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2586),
                            IsClosed = false,
                            Title = "همه چی فروشی"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 25, 1, 35, 57, 217, DateTimeKind.Local).AddTicks(2640),
                            IsClosed = false,
                            Title = "موبایل کیوان"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AdminRole",
                            NormalizedName = "ADMINROLE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SellerRole",
                            NormalizedName = "SELLERROLE"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BuyerRole",
                            NormalizedName = "BUYERROLE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Admin", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.AppUser", "AppUser")
                        .WithOne("Admin")
                        .HasForeignKey("App.Domain.Core.Entities.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auction", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Product", "Product")
                        .WithMany("Auctions")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Auctions_Products");

                    b.HasOne("App.Domain.Core.Entities.Store", "Store")
                        .WithMany("Auctions")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Auctions_Stores");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Bid", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .IsRequired()
                        .HasConstraintName("FK_Bids_Auctions");

                    b.HasOne("App.Domain.Core.Entities.Buyer", "Buyer")
                        .WithMany("Bids")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Bids_Buyers");

                    b.Navigation("Auction");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Buyer", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.City", "City")
                        .WithMany("Buyers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Buyers_Cities");

                    b.HasOne("App.Domain.Core.Entities.AppUser", "IdNavigation")
                        .WithOne("Buyer")
                        .HasForeignKey("App.Domain.Core.Entities.Buyer", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Buyers_AppUsers");

                    b.Navigation("City");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Buyer", "Buyer")
                        .WithMany("Comments")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Buyers");

                    b.HasOne("App.Domain.Core.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Products");

                    b.Navigation("Buyer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Image", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Images_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Invoice", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Buyer", "Buyer")
                        .WithMany("Invoices")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Buyers");

                    b.HasOne("App.Domain.Core.Entities.Seller", "Seller")
                        .WithMany("Invoices")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Sellers");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.InvoiceProduct", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceProduct_Invoices");

                    b.HasOne("App.Domain.Core.Entities.Product", "Product")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceProduct_Products");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Product", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Categories");

                    b.HasOne("App.Domain.Core.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Stores");

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Seller", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.City", "City")
                        .WithMany("Sellers")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_Cities");

                    b.HasOne("App.Domain.Core.Entities.AppUser", "IdNavigation")
                        .WithOne("Seller")
                        .HasForeignKey("App.Domain.Core.Entities.Seller", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_AppUsers");

                    b.HasOne("App.Domain.Core.Entities.Medal", "Medal")
                        .WithMany("Sellers")
                        .HasForeignKey("MedalId")
                        .HasConstraintName("FK_Sellers_Medals");

                    b.Navigation("City");

                    b.Navigation("IdNavigation");

                    b.Navigation("Medal");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Store", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Seller", "IdNavigation")
                        .WithOne("Store")
                        .HasForeignKey("App.Domain.Core.Entities.Store", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Stores_Sellers");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Entities.AppUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auction", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Buyer", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Comments");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.City", b =>
                {
                    b.Navigation("Buyers");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceProducts");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Medal", b =>
                {
                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Product", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("InvoiceProducts");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Seller", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Store", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
